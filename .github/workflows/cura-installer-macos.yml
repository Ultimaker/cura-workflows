name: Macos Installer
run-name: ${{ inputs.cura_conan_version }} for Macos-${{ inputs.architecture }} by @${{ github.actor }}

on:
  workflow_call:
    inputs:
      cura_conan_version:
        description: 'Cura Conan Version'
        default: 'cura/latest@ultimaker/testing'
        required: true
        type: string

      conan_args:
        description: 'Conan args: eq.: --require-override'
        default: ''
        required: false
        type: string

      enterprise:
        description: 'Build Cura as an Enterprise edition'
        default: false
        required: true
        type: boolean

      staging:
        description: 'Use staging API'
        default: false
        required: true
        type: boolean

      architecture:
        description: 'Architecture'
        required: true
        default: 'ARM64'
        type: string

      operating_system:
        description: 'OS'
        required: true
        default: 'self-hosted-ARM64'
        type: string

      conan_internal:
        required: false
        default: false
        type: boolean

permissions:
  contents: read

env:
  CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_USER }}
  CONAN_PASSWORD: ${{ secrets.CONAN_PASS }}
  CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
  MAC_NOTARIZE_USER: ${{ secrets.MAC_NOTARIZE_USER }}
  MAC_NOTARIZE_PASS: ${{ secrets.MAC_NOTARIZE_PASS }}
  MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
  MACOS_CERT_INSTALLER_P12: ${{ secrets.MACOS_CERT_INSTALLER_P12 }}
  MACOS_CERT_USER: ${{ secrets.MACOS_CERT_USER }}
  MACOS_CERT_PASSPHRASE: ${{ secrets.MACOS_CERT_PASSPHRASE }}
  CURA_CONAN_VERSION: ${{ inputs.cura_conan_version }}
  ENTERPRISE: ${{ inputs.enterprise }}
  STAGING: ${{ inputs.staging }}
  SENTRY_TOKEN: ${{ secrets.CURAENGINE_SENTRY_TOKEN }}

jobs:
  cura-installer-create:
    runs-on: ${{ inputs.operating_system }}

    steps:
      - name: Checkout Cura repo
        uses: actions/checkout@v4
        with:
          repository: Ultimaker/Cura

      - name: Checkout Cura-workflows repo
        uses: actions/checkout@v4
        with:
          repository: Ultimaker/Cura-workflows
          path: Cura-workflows
          ref: CURA-12400_legal_fix

      - name: Setup Python and pip
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.x
          cache: pip
          cache-dependency-path: Cura-workflows/.github/workflows/requirements-runner.txt

      - name: Install Python requirements and Create default Conan profile
        run: pip install -r Cura-workflows/.github/workflows/requirements-runner.txt

      - name: Install Macos system requirements for building
        working-directory: Cura-workflows/runner_scripts
        run: |
          chmod +x macos_setup.sh
          ./macos_setup.sh

      - name: Setup pipeline caches
        run: |
          mkdir -p /Users/runner/.conan/downloads

      - name: Create default Conan profile
        run: conan profile new default --detect --force

      - name: Get Conan configuration
        run: |
          conan config install https://github.com/Ultimaker/conan-config.git
          conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/${{ runner.os }}/${{ runner.arch }}"

      - name: Add runner credentials to cura remote
        run: conan user -p ${{ secrets.CONAN_PASS }} -r cura ${{ secrets.CONAN_USER }}

      - name: Add Cura private Artifactory remote
        if: ${{ inputs.conan_internal }}
        run: |
          conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/internal"
          conan user -p ${{ secrets.CONAN_PASS }} -r cura-private ${{ secrets.CONAN_USER }}

      - name: Cache Conan downloads
        uses: actions/cache@v3
        with:
          path: /home/runner/.conan/downloads
          key: ${{ runner.os }}-conan-downloads-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-conan-downloads-

      - name: Remove Macos keychain (Bash)
        run: security delete-keychain signing_temp.keychain || true

      - name: Configure Macos keychain Developer Cert(Bash)
        id: macos-keychain-developer-cert
        uses: apple-actions/import-codesign-certs@v1
        with:
          keychain-password: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          p12-file-base64: ${{ secrets.MACOS_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSPHRASE }}

      - name: Configure Macos keychain Installer Cert (Bash)
        id: macos-keychain-installer-cert
        uses: apple-actions/import-codesign-certs@v1
        with:
          keychain-password: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          create-keychain: false # keychain is created in previous use of action.
          p12-file-base64: ${{ secrets.MACOS_CERT_INSTALLER_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSPHRASE }}

      - name: Remove private Artifactory
        if: ${{ ! inputs.conan_internal }}
        run: conan remote remove cura-private || true

      - name: Create the Packages (Bash)
        run: conan install $CURA_CONAN_VERSION ${{ inputs.conan_args }} --build=missing --update -if cura_inst -g VirtualPythonEnv -o cura:enterprise=$ENTERPRISE -o cura:staging=$STAGING  -o cura:internal=${{ inputs.conan_internal }} -c tools.build:skip_test=True -s curaengine:build_type=RelWithDebInfo -s arcus:build_type=RelWithDebInfo -s clipper:build_type=RelWithDebInfo

      - name: Set Environment variables for Cura (bash)
        run: |
          . ./cura_inst/bin/activate_github_actions_env.sh
          . ./cura_inst/bin/activate_github_actions_version_env.sh

      - name: Unlock Macos keychain (Bash)
        run: security unlock -p $TEMP_KEYCHAIN_PASSWORD signing_temp.keychain
        env:
          TEMP_KEYCHAIN_PASSWORD: ${{  steps.macos-keychain-developer-cert.outputs.keychain-password }}

      - name: Create the Cura dist
        run: pyinstaller ./cura_inst/UltiMaker-Cura.spec

      - name: Output the file name and extension
        id: filename
        run: python Cura-workflows/runner_scripts/cura_installer_filename.py --os ${{ runner.os }} --arch ${{ inputs.architecture }} --enterprise ${{ inputs.enterprise }} --internal ${{ inputs.conan_internal }}

      - name: Summarize the used dependencies
        run: python Cura-workflows/runner_scripts/summarize_used_dependencies.py --installer_filename ${{ steps.filename.outputs.INSTALLER_FILENAME }}

      - name: Create the Macos dmg (Bash)
        run: python ../cura_inst/packaging/MacOS/build_macos.py --source_path ../cura_inst --dist_path . --cura_conan_version $CURA_CONAN_VERSION --filename "${{ steps.filename.outputs.INSTALLER_FILENAME }}" --build_dmg --build_pkg --app_name "$CURA_APP_NAME"
        working-directory: dist

      - name: Remove internal packages before uploading
        run: |
          conan remove "*@internal/*" -f || true
          conan remove "cura_private_data*" -f || true

      - name: Upload the Package(s)
        if: ${{ always() && ! inputs.conan_internal }}
        run: conan upload "*" -r cura --all -c

      - name: Upload the dmg
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ steps.filename.outputs.INSTALLER_FILENAME }}-dmg
          path: |
            dist/${{ steps.filename.outputs.INSTALLER_FILENAME }}.dmg
          retention-days: 5

      - name: Upload the pkg
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ steps.filename.outputs.INSTALLER_FILENAME }}-pkg
          path: |
            dist/${{ steps.filename.outputs.INSTALLER_FILENAME }}.pkg
          retention-days: 5

      - name: Write the run info
        shell: python
        run: |
          import os
          with open("run_info.sh", "w") as f:
              f.writelines(f'echo "CURA_VERSION_FULL={os.environ["CURA_VERSION_FULL"]}" >> $GITHUB_ENV\n')

      - name: Upload the run info
        uses: actions/upload-artifact@v4.3.3
        with:
          name: macos-run-info-${{ inputs.architecture }}
          path: |
            run_info.sh
          retention-days: 5
