name: Conan Package Discovery by Jira Ticket

on:
  workflow_call:
    inputs:
      jira_ticket_number:
        default: ''
        required: true
        type: string

jobs:
  discover_conan_packages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Validate Jira Ticket Number Format
        id: validate_input
        run: |
          set -euo pipefail
          INPUT_TICKET="${{ github.event.inputs.jira_ticket_number }}"

          # Normalize input: lowercase, replace '-' with '_'
          NORMALIZED_TICKET=$(echo "$INPUT_TICKET" | tr '[:upper:]' '[:lower:]' | sed 's/-/_/g')

          # If only a number is provided, prepend 'cura_'
          if [[ "$NORMALIZED_TICKET" =~ ^[0-9]+$ ]]; then
            NORMALIZED_TICKET="cura_${NORMALIZED_TICKET}"
          fi

          # Extract keyword and number
          KEYWORD=$(echo "$NORMALIZED_TICKET" | cut -d'_' -f1)
          NUMBER=$(echo "$NORMALIZED_TICKET" | grep -oE '[0-9]+')

          # Validate keyword and number
          if [[ ! "$KEYWORD" =~ ^(cura|np|pp)$ ]]; then
            echo "::error::Invalid Jira ticket keyword. Expected one of: cura, np, pp."
            exit 1
          fi
          if [[ -z "$NUMBER" ]]; then
            echo "::error::No number found in Jira ticket input."
            exit 1
          fi

          # Compose the fixed ticket string
          FIXED_TICKET="${KEYWORD}_${NUMBER}"
          echo "Jira ticket number normalized to '$FIXED_TICKET'."
          echo "jira_ticket_number=$FIXED_TICKET" >> "$GITHUB_OUTPUT"

      - name: Setup the build environment
        uses: ultimaker/cura-workflows/.github/actions/setup-build-environment@main
        with:
          conan_user: ${{ secrets.CONAN_USER }}
          conan_password: ${{ secrets.CONAN_PASS }}
          private_data: true

      - name: Discover Conan Packages
        id: conan_search
        run: |
          set -euo pipefail

          JIRA_TICKET="${{ steps.validate_input.outputs.jira_ticket_number }}"
          CONAN_PACKAGE_REFERENCE="*/*@ultimaker/${JIRA_TICKET}"
          DISCOVERED_PACKAGES=()

          echo "Searching for Conan packages matching pattern: $CONAN_PACKAGE_REFERENCE"
          SEARCH_RESULT=$(conan list "$CONAN_PACKAGE_REFERENCE" -r=* --format=json || true)
          JSON_DATA=$(echo "$SEARCH_RESULT" | sed -n '/^{/,$p')

          # Filter lines without a '+' character
          FOUND_ITEMS=$(jq -r 'to_entries[] | .value | keys[] | select(index("+") | not)' <<< "$JSON_DATA")

          if [ -n "$FOUND_ITEMS" ]; then
            mapfile -t DISCOVERED_PACKAGES <<< "$FOUND_ITEMS"
          else
            echo "No packages found in any remote matching $CONAN_PACKAGE_REFERENCE"
          fi

          echo "### Conan Packages Found for Jira Ticket: ${JIRA_TICKET}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY" # Add a blank line for spacing
          echo "The workflow searched for Conan packages matching the pattern \`${CONAN_PACKAGE_REFERENCE}\` across all configured remotes." >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY" # Add a blank line for spacing
          echo "**Discovered Packages:**" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY" # Add a blank line for spacing

          if [ ${#DISCOVERED_PACKAGES[@]} -eq 0 ]; then
            echo "*No packages found matching the specified tag.*" >> "$GITHUB_STEP_SUMMARY"
          else
            printf '%s\n' "${DISCOVERED_PACKAGES[@]}" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY" # Add a blank line for spacing
          echo "---" >> "$GITHUB_STEP_SUMMARY" # Add a separator for cleanliness